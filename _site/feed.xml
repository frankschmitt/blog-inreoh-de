<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-11-18T22:48:30+01:00</updated><id>http://localhost:4000/</id><title type="html">Inreoh‚Äôs Random Rambles</title><subtitle>Random ramblings about programming, tech, cooking and whatever else happens to interest me.</subtitle><entry><title type="html">H√ºhner-Satay-Spiesse</title><link href="http://localhost:4000/jekyll/update/2017/11/18/satay-spiesse.html" rel="alternate" type="text/html" title="H√ºhner-Satay-Spiesse" /><published>2017-11-18T17:46:13+01:00</published><updated>2017-11-18T17:46:13+01:00</updated><id>http://localhost:4000/jekyll/update/2017/11/18/satay-spiesse</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/11/18/satay-spiesse.html">&lt;h1 id=&quot;quelle&quot;&gt;Quelle&lt;/h1&gt;
&lt;p&gt;Das grosse Buch der asiatischen K√ºche, S.60&lt;/p&gt;
&lt;h1 id=&quot;zubereitung&quot;&gt;Zubereitung&lt;/h1&gt;
&lt;p&gt;Holzspiesse &amp;gt;= 30 min in Wasser einlegen
  500g H√ºhnerbrustfleisch l√§ngs halbieren. In einer metallfreien Sch√ºssel 
  1 EL Honig 
  60 ml Sojasauce 
  2 TL Sesam√∂l 
  1 TL gemahlene Kurkuma 
  1 TL gemahlenen Koriander und 
  1/2 TL Chilipulver verr√ºhren. H√ºhnerfleisch ziehharmonikaf√∂rmig auf eingeweichte Holzspiesse stecken und die Fleischspiesse in die Marinade legen. 
Zugedeckt mindestens 2 h im K√ºhlschrank ziehen lassen.&lt;/p&gt;

&lt;p&gt;F√ºr die schnelle Satay-Sauce
  1 kleine Zwiebel fein hacken und in
  1 EL √ñl glasig werden lassen
  125 g k√∂rnige Erdnussbutter
  2 EL Sojasauce
  125 ml Kokoscreme
  2 EL s√º√üe Chilisauce
unterr√ºhren und bei geringer Hitze zu einer s√§migen Sauce einkochen lassen.
Die Fleischspiesse im vorgeheizten Ofen
  5-7 min grillen
dabei mehrmals wenden und mit Marinade bestreichen. Die Spiesse mit warmer Satay-Sauce reichen. Ergibt 8 St√ºck.&lt;/p&gt;</content><author><name></name></author><summary type="html">Quelle Das grosse Buch der asiatischen K√ºche, S.60 Zubereitung Holzspiesse &amp;gt;= 30 min in Wasser einlegen 500g H√ºhnerbrustfleisch l√§ngs halbieren. In einer metallfreien Sch√ºssel 1 EL Honig 60 ml Sojasauce 2 TL Sesam√∂l 1 TL gemahlene Kurkuma 1 TL gemahlenen Koriander und 1/2 TL Chilipulver verr√ºhren. H√ºhnerfleisch ziehharmonikaf√∂rmig auf eingeweichte Holzspiesse stecken und die Fleischspiesse in die Marinade legen. Zugedeckt mindestens 2 h im K√ºhlschrank ziehen lassen.</summary></entry><entry><title type="html">Welcome Jekyll; goodbye, Blogspot!</title><link href="http://localhost:4000/jekyll/update/2017/11/18/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome Jekyll; goodbye, Blogspot!" /><published>2017-11-18T17:46:13+01:00</published><updated>2017-11-18T17:46:13+01:00</updated><id>http://localhost:4000/jekyll/update/2017/11/18/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/11/18/welcome-to-jekyll.html">&lt;p&gt;While hosting my blog at inreoh.blogspot.de served me quite well for a couple of years,
I recently began to get annoyed by the limitations of this approach, namely:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;having to use an inferior editor (the web-based one) as opposed to vim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting started is quite easy:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; starts a new Jekyll project, and serves it at localhost:4000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To convert an existing Blogger blog:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;YYYY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-import&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;JekyllImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Importers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Blogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;source&quot;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/path/to/blog-MM-DD-YYYY.xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;no-blogger-info&quot;&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# not to leave blogger-URL info (id and old URL) in the front matter&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;replace-internal-link&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# replace internal links using the post_url liquid tag.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubygems&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; imports your blog posts by adding a file in \_static/ for each of them&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">While hosting my blog at inreoh.blogspot.de served me quite well for a couple of years, I recently began to get annoyed by the limitations of this approach, namely: having to use an inferior editor (the web-based one) as opposed to vim</summary></entry><entry><title type="html">No more KeePassX / KeePassXC woes</title><link href="http://localhost:4000/2017/10/07/no-more-keepassx-keepassxc-woes.html" rel="alternate" type="text/html" title="No more KeePassX / KeePassXC woes" /><published>2017-10-07T18:03:00+02:00</published><updated>2017-10-07T18:03:00+02:00</updated><id>http://localhost:4000/2017/10/07/no-more-keepassx-keepassxc-woes</id><content type="html" xml:base="http://localhost:4000/2017/10/07/no-more-keepassx-keepassxc-woes.html">KeePass is an amazing tool for storing passwords in a secure manner, but syncing password databases across multiple devices can be somewhat challenging.&lt;br /&gt;&lt;br /&gt;For several years, I've used&lt;br /&gt;- MiniKeepass on iOS&lt;br /&gt;- KeePass + Mono on OS X&lt;br /&gt;- Dropbox for syncing&lt;br /&gt;&lt;br /&gt;and was quite content with this combination.&lt;br /&gt;&lt;br /&gt;But since KeePass is not very well integrated in OS X, I decided to switch to KeePass X. This seemed ok at first glance, but recently I noticed that several entries I had created in MiniKeepass were missing in KeePassX üòï. I then tried KeePassXC, with the same result.&lt;br /&gt;&lt;br /&gt;I still haven't found the root cause - it might be a manifestation of h&lt;a href=&quot;ttps://github.com/MiniKeePass/MiniKeePass/issues/136&quot;&gt;ttps://github.com/MiniKeePass/MiniKeePass/issues/136&lt;/a&gt; or a similar (more recent) bug in MiniKeepass, but I haven't found time to investigate this.&lt;br /&gt;&lt;br /&gt;For the time being, I switched from KeePassX / KeePassXC to &lt;a href=&quot;https://mstarke.github.io/MacPass/&quot;&gt;MacPass.&lt;/a&gt;&lt;br /&gt;It's also Open Source, and it seems to be able to handle alle entries created by MiniKeepass.</content><author><name>Frank Schmitt</name></author><category term="KeePass" /><category term="MacOSX" /><category term="kdbx" /><summary type="html">KeePass is an amazing tool for storing passwords in a secure manner, but syncing password databases across multiple devices can be somewhat challenging.For several years, I've used- MiniKeepass on iOS- KeePass + Mono on OS X- Dropbox for syncingand was quite content with this combination.But since KeePass is not very well integrated in OS X, I decided to switch to KeePass X. This seemed ok at first glance, but recently I noticed that several entries I had created in MiniKeepass were missing in KeePassX üòï. I then tried KeePassXC, with the same result.I still haven't found the root cause - it might be a manifestation of https://github.com/MiniKeePass/MiniKeePass/issues/136 or a similar (more recent) bug in MiniKeepass, but I haven't found time to investigate this.For the time being, I switched from KeePassX / KeePassXC to MacPass.It's also Open Source, and it seems to be able to handle alle entries created by MiniKeepass.</summary></entry><entry><title type="html">Chromecast setup - not as easy as promised</title><link href="http://localhost:4000/2016/12/30/chromecast-setup-not-as-easy-as-promised.html" rel="alternate" type="text/html" title="Chromecast setup - not as easy as promised" /><published>2016-12-30T18:23:00+01:00</published><updated>2016-12-30T18:23:00+01:00</updated><id>http://localhost:4000/2016/12/30/chromecast-setup-not-as-easy-as-promised</id><content type="html" xml:base="http://localhost:4000/2016/12/30/chromecast-setup-not-as-easy-as-promised.html">Today, I bought a Google Chromecast for a friend of mine. The leaflet promises setup in three easy steps:  &lt;ul&gt; &lt;li&gt; connect to power and TV (via HDMI)   =&amp;gt; ok, no problem&lt;/li&gt; &lt;li&gt; switch the source on your TV to the chromecast   =&amp;gt; ok, the splash screen asks you to open chromecast.com/setup to complete the setup &lt;/li&gt; &lt;li&gt; open chromecast.com/setup    =&amp;gt; doesn't work at all - apparently, the chromecast fails to perform a DNS lookup for itself (sic!) &lt;/li&gt; &lt;/ul&gt; The only reliable way to get it to work seems to be to install the Google Home app and use that to setup the Chromecast - which is okay, but the leaflet and the Chromecast itself explicitly recommend doing it the other way. It's a shame that Google fails to provide correct information regarding such a basic thing.</content><author><name>Frank Schmitt</name></author><summary type="html">Today, I bought a Google Chromecast for a friend of mine. The leaflet promises setup in three easy steps: connect to power and TV (via HDMI) =&amp;gt; ok, no problem switch the source on your TV to the chromecast =&amp;gt; ok, the splash screen asks you to open chromecast.com/setup to complete the setup open chromecast.com/setup =&amp;gt; doesn't work at all - apparently, the chromecast fails to perform a DNS lookup for itself (sic!) The only reliable way to get it to work seems to be to install the Google Home app and use that to setup the Chromecast - which is okay, but the leaflet and the Chromecast itself explicitly recommend doing it the other way. It's a shame that Google fails to provide correct information regarding such a basic thing.</summary></entry><entry><title type="html">Unit testing PL/SQL stored procedures with JRuby (Part I)</title><link href="http://localhost:4000/2016/12/09/unit-testing-plsql-stored-procedures.html" rel="alternate" type="text/html" title="Unit testing PL/SQL stored procedures with JRuby (Part I)" /><published>2016-12-09T17:35:00+01:00</published><updated>2016-12-09T17:35:00+01:00</updated><id>http://localhost:4000/2016/12/09/unit-testing-plsql-stored-procedures</id><content type="html" xml:base="http://localhost:4000/2016/12/09/unit-testing-plsql-stored-procedures.html">&lt;h2&gt;Synopsis&lt;/h2&gt;My PL/SQL code that's running on Oracle doesn't have proper unit tests so far. The main reasons for this are&lt;br /&gt;- lack of tooling (neither utplsql nor QuestCodeTester nor the SQL Developer built-in has satisfied me so far)&lt;br /&gt;- lack of time (lame excuse, I know)&lt;br /&gt;&lt;br /&gt;So I decided to once more tackle the problem.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Past experiences&lt;/h2&gt;Until now, I've tried the following approaches:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;utPLSQL&lt;/h3&gt;&lt;h4&gt;Pro&lt;/h4&gt;- runs directly in the database =&amp;gt; no additional setup necessary&lt;br /&gt;- syntax errors in the unit tests / procedure calls are caught by the compiler&lt;br /&gt;- same language for Code Under Test and unit tests&lt;br /&gt;&lt;h4&gt;Con&lt;/h4&gt;- PL/SQL is quite limited in its expressiveness&lt;br /&gt;- Integration in a CI environment for automatic builds / reporting build failures requires additional work &lt;br /&gt;&lt;h3&gt;MRI Ruby with oci8 and Cucumber Spec files&lt;/h3&gt;&lt;h4&gt;Pro&lt;/h4&gt;- Ruby (it's such a wonderful language, really)&lt;br /&gt;- Gherkin syntax for spec files&lt;br /&gt;&lt;h4&gt;Con&lt;/h4&gt;- complicated deployment in CI environment (requires at least an Oracle instant client installation)&lt;br /&gt;- even more complicated to set up on Windows (requires Devkit to compile the native extension oci8)&lt;br /&gt;&lt;h3&gt;.NET with SpecFlow &lt;/h3&gt;&lt;h4&gt;Pro&lt;/h4&gt;- excellent IDE (Visual Studio)&lt;br /&gt;- Gherkin syntax for spec files&lt;br /&gt;&lt;h4&gt;Con&lt;/h4&gt;- Windows only (although Mono might be viable, but setting this up with ODP.NET / Oracle client seems quite complicated)&lt;br /&gt;- C# is quite verbose (F# might be an alternative, though)&lt;br /&gt;&lt;h3&gt;Java with Maven, JUnit / Cucumber-JVM &lt;/h3&gt;&lt;h4&gt;Pro&lt;/h4&gt;- real cross-platform&lt;br /&gt;- easy deployment (no need for the Oracle client - just include ojdbc7.jar)&lt;br /&gt;- Gherkin syntax for spec files&lt;br /&gt;&lt;h4&gt;Con&lt;/h4&gt;- Java is incredibly verbose (Scala / Kotlin might be an alternative, though)&lt;br /&gt;- Maven (enough said)&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;A new horizon&lt;/h2&gt;&lt;h4&gt;Requirements &lt;/h4&gt;My new solution should be:&lt;br /&gt;- easy to deploy (no full-blown Oracle client necessary)&lt;br /&gt;- really cross-platform (Windows, Linux, Mac OS X; Docker integration not strictly necessary, but would be very nice)&lt;br /&gt;&amp;nbsp;- joyful (this excludes Java as a language, Maven as a build tool, and several others)&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Choice&lt;/h4&gt;For now, I'll go with:&lt;br /&gt;- JRuby (Ruby + JVM = dream team)&lt;br /&gt;- Gradle (although I might switch to Rake)&lt;br /&gt;- RSpec (although I might switch to Cucumber if I want a more high-level solution)&lt;br /&gt;&lt;br /&gt;</content><author><name>Frank Schmitt</name></author><summary type="html">SynopsisMy PL/SQL code that's running on Oracle doesn't have proper unit tests so far. The main reasons for this are- lack of tooling (neither utplsql nor QuestCodeTester nor the SQL Developer built-in has satisfied me so far)- lack of time (lame excuse, I know)So I decided to once more tackle the problem.Past experiencesUntil now, I've tried the following approaches:utPLSQLPro- runs directly in the database =&amp;gt; no additional setup necessary- syntax errors in the unit tests / procedure calls are caught by the compiler- same language for Code Under Test and unit testsCon- PL/SQL is quite limited in its expressiveness- Integration in a CI environment for automatic builds / reporting build failures requires additional work MRI Ruby with oci8 and Cucumber Spec filesPro- Ruby (it's such a wonderful language, really)- Gherkin syntax for spec filesCon- complicated deployment in CI environment (requires at least an Oracle instant client installation)- even more complicated to set up on Windows (requires Devkit to compile the native extension oci8).NET with SpecFlow Pro- excellent IDE (Visual Studio)- Gherkin syntax for spec filesCon- Windows only (although Mono might be viable, but setting this up with ODP.NET / Oracle client seems quite complicated)- C# is quite verbose (F# might be an alternative, though)Java with Maven, JUnit / Cucumber-JVM Pro- real cross-platform- easy deployment (no need for the Oracle client - just include ojdbc7.jar)- Gherkin syntax for spec filesCon- Java is incredibly verbose (Scala / Kotlin might be an alternative, though)- Maven (enough said)A new horizonRequirements My new solution should be:- easy to deploy (no full-blown Oracle client necessary)- really cross-platform (Windows, Linux, Mac OS X; Docker integration not strictly necessary, but would be very nice)&amp;nbsp;- joyful (this excludes Java as a language, Maven as a build tool, and several others)ChoiceFor now, I'll go with:- JRuby (Ruby + JVM = dream team)- Gradle (although I might switch to Rake)- RSpec (although I might switch to Cucumber if I want a more high-level solution)</summary></entry><entry><title type="html">Oracle JDBC + Maven - how (not) to do it</title><link href="http://localhost:4000/2016/07/19/oracle-jdbc-maven-how-not-to-do-it.html" rel="alternate" type="text/html" title="Oracle JDBC + Maven - how (not) to do it" /><published>2016-07-19T22:54:00+02:00</published><updated>2016-07-19T22:54:00+02:00</updated><id>http://localhost:4000/2016/07/19/oracle-jdbc-maven-how-not-to-do-it</id><content type="html" xml:base="http://localhost:4000/2016/07/19/oracle-jdbc-maven-how-not-to-do-it.html">&lt;h2&gt;Warning&lt;/h2&gt;This post is somewhat of a rant - if you are affiliated with Oracle corp, you might want to avoid reading the rest.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;The goal&lt;/h2&gt;I wanted to write a simple Java application that demonstrated property based testing for a PL/SQL function in an Oracle database.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;The facts, and some assumptions&lt;/h2&gt;Oracle database is owned by Oracle corp.&lt;br /&gt;Java is owned by Oracle corp.&amp;nbsp;&lt;br /&gt;Maven is the de-facto standard for building Java applications.&lt;br /&gt;&lt;br /&gt;Therefore, one might assume that using Maven to build a Java application that connects to an Oracle database is pretty straightforward - just include the relevant dependency in your POM. After all, it's just a JDBC client, right? &lt;br /&gt;&lt;br /&gt;RIGHT?&lt;br /&gt;&lt;br /&gt;Nope.&lt;br /&gt;&lt;br /&gt;Welcome to the wonderful world of Oracle, where lawyers, usage restrictions and stupid license agreements are king and developers are ... not really welcome.&lt;br /&gt;&lt;br /&gt;You either have to&lt;br /&gt;- download the jar file from Oracle's website (and acknowledge that you're legally entitled to download it), register with Oracle and say yes to their proprietary license agreement&lt;br /&gt;- install the jar file locally with maven&lt;br /&gt;&lt;br /&gt;or&lt;br /&gt;- use the Oracle maven repository (which - again - requires you to register with Oracle and acknowledge their proprietary license agreement)&lt;br /&gt;- store your username + encrypted password in a settings file&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;The conclusion&lt;/h2&gt;Never use Oracle products for hobby projects, especially not the database. It's just not worth the hassle. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><author><name>Frank Schmitt</name></author><summary type="html">WarningThis post is somewhat of a rant - if you are affiliated with Oracle corp, you might want to avoid reading the rest.The goalI wanted to write a simple Java application that demonstrated property based testing for a PL/SQL function in an Oracle database.The facts, and some assumptionsOracle database is owned by Oracle corp.Java is owned by Oracle corp.&amp;nbsp;Maven is the de-facto standard for building Java applications.Therefore, one might assume that using Maven to build a Java application that connects to an Oracle database is pretty straightforward - just include the relevant dependency in your POM. After all, it's just a JDBC client, right? RIGHT?Nope.Welcome to the wonderful world of Oracle, where lawyers, usage restrictions and stupid license agreements are king and developers are ... not really welcome.You either have to- download the jar file from Oracle's website (and acknowledge that you're legally entitled to download it), register with Oracle and say yes to their proprietary license agreement- install the jar file locally with mavenor- use the Oracle maven repository (which - again - requires you to register with Oracle and acknowledge their proprietary license agreement)- store your username + encrypted password in a settings fileThe conclusionNever use Oracle products for hobby projects, especially not the database. It's just not worth the hassle.</summary></entry><entry><title type="html">vim Cheatsheet</title><link href="http://localhost:4000/2016/05/24/vim-cheatsheet.html" rel="alternate" type="text/html" title="vim Cheatsheet" /><published>2016-05-24T19:56:00+02:00</published><updated>2016-05-24T19:56:00+02:00</updated><id>http://localhost:4000/2016/05/24/vim-cheatsheet</id><content type="html" xml:base="http://localhost:4000/2016/05/24/vim-cheatsheet.html">&lt;h2&gt;Code formatting&lt;/h2&gt;gg=G format current file&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Processing text through external commands&amp;nbsp;&lt;/h2&gt;Use the ex command ! for this&lt;br /&gt;&lt;h3&gt;Example&lt;/h3&gt;:!sort&lt;br /&gt;This will sort the current selection.&lt;br /&gt;&lt;h2&gt;&lt;/h2&gt;&lt;br /&gt;</content><author><name>Frank Schmitt</name></author><summary type="html">Code formattinggg=G format current fileProcessing text through external commands&amp;nbsp;Use the ex command ! for thisExample:!sortThis will sort the current selection.</summary></entry><entry><title type="html">Getting rid of those pesky non-breaking spaces (U+00A0) on MacOS X</title><link href="http://localhost:4000/2016/02/18/getting-rid-of-those-pesky-non-breaking.html" rel="alternate" type="text/html" title="Getting rid of those pesky non-breaking spaces (U+00A0) on MacOS X" /><published>2016-02-18T18:24:00+01:00</published><updated>2016-02-18T18:24:00+01:00</updated><id>http://localhost:4000/2016/02/18/getting-rid-of-those-pesky-non-breaking</id><content type="html" xml:base="http://localhost:4000/2016/02/18/getting-rid-of-those-pesky-non-breaking.html">A problem that's been bugging me for quite some time was that for no obvious reasons, source code I entered broke on space characters. Removing the space characters and re-entering them usually fixed the problem.&lt;br /&gt;&lt;br /&gt;Finally, iex (the interactive Elixir shell) gave me a clue to what was really going on:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;iex(11)&amp;gt; [ 65&amp;nbsp;]&lt;br /&gt;** (SyntaxError) iex:11: unexpected token: &quot;&amp;nbsp;&quot; (column 5, codepoint U+00A0)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;DuckDuckGoing for U+00A0 quickly revealed that U+00A0 is a non-breaking space (or nbsp). To show the offender in vim, put this in your .vimrc:&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;&quot; show those darn non-breaking spaces &amp;nbsp; aka U+00A0&lt;br /&gt;set list&lt;br /&gt;set listchars=nbsp:.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;But to really get rid of the problem, you can just remap the combination Alt+Space (which inserts the nbsp) to a plain ol' space (shamelessly copied from &lt;a href=&quot;http://apple.stackexchange.com/a/34673/171861&quot;&gt;StackExchange&lt;/a&gt;):&lt;br /&gt;- create the directory ~/Library/KeyBindings/&lt;br /&gt;- create a new file DefaultKeyBinding.dict in this directory&lt;br /&gt;- add the following entry to this file:&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;~ &quot; = (insertText:, &quot; &quot;);&lt;br /&gt;} &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><author><name>Frank Schmitt</name></author><category term="Keyboard" /><category term="MacOSX" /><category term="vim" /><category term="nbsp" /><summary type="html">A problem that's been bugging me for quite some time was that for no obvious reasons, source code I entered broke on space characters. Removing the space characters and re-entering them usually fixed the problem.Finally, iex (the interactive Elixir shell) gave me a clue to what was really going on:iex(11)&amp;gt; [ 65&amp;nbsp;]** (SyntaxError) iex:11: unexpected token: &quot;&amp;nbsp;&quot; (column 5, codepoint U+00A0)DuckDuckGoing for U+00A0 quickly revealed that U+00A0 is a non-breaking space (or nbsp). To show the offender in vim, put this in your .vimrc:&quot; show those darn non-breaking spaces &amp;nbsp; aka U+00A0set listset listchars=nbsp:.But to really get rid of the problem, you can just remap the combination Alt+Space (which inserts the nbsp) to a plain ol' space (shamelessly copied from StackExchange):- create the directory ~/Library/KeyBindings/- create a new file DefaultKeyBinding.dict in this directory- add the following entry to this file:{&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;~ &quot; = (insertText:, &quot; &quot;);}</summary></entry><entry><title type="html">Getting rid of the Docker error ‚ÄúConnectEx tcp: No connection could be made because the target machine actively refused it..‚Äù</title><link href="http://localhost:4000/2016/01/25/getting-rid-of-docker-error-connectex.html" rel="alternate" type="text/html" title="Getting rid of the Docker error &quot;ConnectEx tcp: No connection could be made because the target machine actively refused it..&quot;" /><published>2016-01-25T19:58:00+01:00</published><updated>2016-01-25T19:58:00+01:00</updated><id>http://localhost:4000/2016/01/25/getting-rid-of-docker-error-connectex</id><content type="html" xml:base="http://localhost:4000/2016/01/25/getting-rid-of-docker-error-connectex.html">Out of the blue, the Docker setup on my company-provided Windows laptop stopped working; I could launch the &quot;Docker Quickstart Terminal&quot; just fine, but every attempt to run a docker command (e.g. &quot;docker ps&quot;) resulted in the error message:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ConnectEx tcp: No connection could be made because the target machine actively refused it..&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;nbsp;&lt;/code&gt;&lt;/pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;/code&gt;Re-installing VirtualBox and Docker didn't help - the setup worked exactly once,&lt;br /&gt;&amp;nbsp;but after the next reboot, the dreaded error message appeared again.&lt;br /&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;The root cause was my corporate VPN client; whenever I establish a VPN connection, the client seems to cut off all other NICs, thereby disabling connections to the DockerHost VirtualBox VM.&lt;br /&gt;&lt;br /&gt;So right now, I can either work offline with Docker or work online without Docker. That kind of sucks :-/</content><author><name>Frank Schmitt</name></author><category term="Windows" /><category term="Docker" /><summary type="html">Out of the blue, the Docker setup on my company-provided Windows laptop stopped working; I could launch the &quot;Docker Quickstart Terminal&quot; just fine, but every attempt to run a docker command (e.g. &quot;docker ps&quot;) resulted in the error message:ConnectEx tcp: No connection could be made because the target machine actively refused it..&amp;nbsp;Re-installing VirtualBox and Docker didn't help - the setup worked exactly once,&amp;nbsp;but after the next reboot, the dreaded error message appeared again.&amp;nbsp;The root cause was my corporate VPN client; whenever I establish a VPN connection, the client seems to cut off all other NICs, thereby disabling connections to the DockerHost VirtualBox VM.So right now, I can either work offline with Docker or work online without Docker. That kind of sucks :-/</summary></entry><entry><title type="html">Docker cheatsheet</title><link href="http://localhost:4000/2016/01/09/docker-cheatsheet.html" rel="alternate" type="text/html" title="Docker cheatsheet" /><published>2016-01-09T17:02:00+01:00</published><updated>2016-01-09T17:02:00+01:00</updated><id>http://localhost:4000/2016/01/09/docker-cheatsheet</id><content type="html" xml:base="http://localhost:4000/2016/01/09/docker-cheatsheet.html">&lt;h2&gt;Remove all containers&lt;/h2&gt;docker ps -a -q | xargs docker rm&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><author><name>Frank Schmitt</name></author><category term="Docker" /><summary type="html">Remove all containersdocker ps -a -q | xargs docker rm</summary></entry></feed>