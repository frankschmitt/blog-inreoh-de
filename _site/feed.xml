<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-05-21T12:38:16+02:00</updated><id>/</id><title type="html">Inreoh’s Random Rambles</title><subtitle>Random ramblings about programming, tech, cooking and whatever else happens to interest me.</subtitle><entry><title type="html">Why I do not like Go - revisited</title><link href="/development/rant/2018/01/10/Why_I_do_not_like_Go_revisited.html" rel="alternate" type="text/html" title="Why I do not like Go - revisited" /><published>2018-01-10T00:00:00+01:00</published><updated>2018-01-10T00:00:00+01:00</updated><id>/development/rant/2018/01/10/Why_I_do_not_like_Go_revisited</id><content type="html" xml:base="/development/rant/2018/01/10/Why_I_do_not_like_Go_revisited.html">&lt;h1 id=&quot;synopsis&quot;&gt;Synopsis&lt;/h1&gt;
&lt;p&gt;I’ve recently played a little bit with Go (solved one of the Advent of Code puzzles in it - another Blog post with details regarding that will follow soon), and overall, I don’t like it. I don’t like its attitude, and I don’t like the lack of convenience features I expect from newly designed languages nowadays.&lt;/p&gt;

&lt;p&gt;This is an updated version written because @inge4pres pointed out on Twitter that the original version of this post was merely a rant without any hard facts.&lt;/p&gt;

&lt;p&gt;Disclaimer: As you probably have guessed, I’m a Go beginner - however, I’ve got 10+ years of professional programming experience.&lt;/p&gt;

&lt;h1 id=&quot;the-good&quot;&gt;The good&lt;/h1&gt;
&lt;h2 id=&quot;formatting&quot;&gt;Formatting&lt;/h2&gt;
&lt;p&gt;One of the (few) things I like about Go is that it brings its own formatting tool along and that there’s zero room for configuring it. So no discussions about formatting, braces style etc.&lt;/p&gt;

&lt;h1 id=&quot;the-bad&quot;&gt;The bad&lt;/h1&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Apparently, Go’s default testing package doesn’t provide ExpectEquals and similar.&lt;/p&gt;

&lt;p&gt;Taken from https://golang.org/doc/code.html#Testing (official Go documentation):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    got := Reverse(c.in)
    if got != c.want {
      t.Errorf(&quot;Reverse(%q) == %q, want %q&quot;, c.in, got, c.want)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Seriously? You recommend I &lt;em&gt;manually compose my assertion and error message&lt;/em&gt; when I want to write a trivial unit test?&lt;/p&gt;

&lt;p&gt;What was so wrong about&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  AssertEquals(Reverse(c.in), c.want, &quot;Reverse does not work as expected&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reasoning seems to be “assertions are bad, therefore we don’t use them”. While I get why you wouldn’t want to have an assert() &lt;em&gt;macro&lt;/em&gt; in your language, an assert() &lt;em&gt;test assertion&lt;/em&gt; surely will hurt no one?
Sure, I can easily roll my own testing package, but that kind of defeats the purpose of a default package, doesn’t it?&lt;/p&gt;

&lt;h2 id=&quot;tooling-or-lack-thereof&quot;&gt;Tooling (or lack thereof)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;REPL: Go doesn’t provide a REPL out-of-the-box (although 3rd party solutions / add-ons exist)&lt;/li&gt;
  &lt;li&gt;Build tool: the &lt;em&gt;go&lt;/em&gt; executable has a &lt;em&gt;build&lt;/em&gt; command, but this apparently doesn’t provide dependency handling (&lt;em&gt;dep&lt;/em&gt; seems to be the official &lt;em&gt;experiment&lt;/em&gt; for handling dependencies)&lt;/li&gt;
  &lt;li&gt;semantic versioning: Go doesn’t provide semantic versioning (which makes sense, since it has no official dependency management tool)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;missing--incomplete-language-features&quot;&gt;Missing / incomplete language features&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Go provides only minimal type inference&lt;/li&gt;
  &lt;li&gt;Go has no standard tuple type&lt;/li&gt;
  &lt;li&gt;Go has no destructuring assignment (which makes sense, since it also has no tuple type)&lt;/li&gt;
  &lt;li&gt;Go has no case &lt;em&gt;expression&lt;/em&gt;, it only has case &lt;em&gt;statements&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Go has no generics. Unofficial advice: “Consider copy &amp;amp; paste” or “Use a code generator” (https://appliedgo.net/generics/). That’s insane.
Java started without Generics, but they noticed that they’re incredibly useful, and therefore added them later on. For Go (which was created &lt;em&gt;after&lt;/em&gt; this change)
to omit Generics &lt;em&gt;on purpose&lt;/em&gt; seems an insane design decision to me.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Especially in comparison to other (relatively) new programming languages (Swift, Rust, Kotlin, Crystal), Go’s type system and language constructs seem quite poor.&lt;/p&gt;

&lt;h1 id=&quot;the-ugly-personal-opinion--experience&quot;&gt;The ugly (personal opinion + experience)&lt;/h1&gt;
&lt;h2 id=&quot;naming&quot;&gt;Naming&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Choosing Go as the name of a new programming language was incredibly stupid (since Go the board game has been around for thousands of years). Searching for “Go tutorial” can therefore never be unambiguous - either you want an explanation of the board game, or you want one for the programming language. But apparently, Google’s arrogance let them assume that they don’t have to respect anybody else.&lt;/li&gt;
  &lt;li&gt;Similarly, Goroutines is a silly name that leads to endless confusion with the well-established term coroutines. The fact that goroutines are &lt;em&gt;similar&lt;/em&gt; to coroutines
&lt;em&gt;but also different&lt;/em&gt; (see http://www.golangpatterns.info/concurrency/coroutines ) makes this even worse.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;attitude-of-the-go-core-team&quot;&gt;Attitude of the Go core team&lt;/h2&gt;
&lt;p&gt;At first, I thought “Ok, Go is still young, and they made some mistakes that they will certainly fix in future releases”. But then, I read this:&lt;/p&gt;

&lt;p&gt;“There are many things in the Go language and libraries that differ from modern practices, simply because we feel it’s sometimes worth trying a different approach. https://golang.org/doc/faq#assertions
“&lt;/p&gt;

&lt;p&gt;To me, this translates to: “We do it differently because we are Google and therefore know better than everybody else on the planet. We ignore important research and knowledge obtained by others because we massively suffer from the NIH syndrome.”&lt;/p&gt;

&lt;h2 id=&quot;attitude-of-go-users&quot;&gt;Attitude of Go users&lt;/h2&gt;
&lt;p&gt;The final straw was the attitude that several Go users showed on StackOverflow, e.g.&lt;/p&gt;

&lt;p&gt;“It’s not the Go way” https://stackoverflow.com/a/18638071/610979&lt;/p&gt;

&lt;p&gt;It might not be the Go way, but it’s the &lt;em&gt;sensible, industry proven&lt;/em&gt; way.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Go seems useless to me. It would have been a great language if it had been invented in the ’80s, and it would have been ok in the ’90s. But in the 21st century, its lack of features is appalling (esp. compared to Rust, Crystal etc.)&lt;/p&gt;

&lt;p&gt;Goodbye, Go. I wish you all the best.&lt;/p&gt;</content><author><name></name></author><category term="code" /><category term="development" /><category term="Go" /><category term="programming" /><summary type="html">Synopsis I’ve recently played a little bit with Go (solved one of the Advent of Code puzzles in it - another Blog post with details regarding that will follow soon), and overall, I don’t like it. I don’t like its attitude, and I don’t like the lack of convenience features I expect from newly designed languages nowadays.</summary></entry><entry><title type="html">Why I do not like Go</title><link href="/development/rant/2018/01/07/Why_I_do_not_like_Go.html" rel="alternate" type="text/html" title="Why I do not like Go" /><published>2018-01-07T00:00:00+01:00</published><updated>2018-01-07T00:00:00+01:00</updated><id>/development/rant/2018/01/07/Why_I_do_not_like_Go</id><content type="html" xml:base="/development/rant/2018/01/07/Why_I_do_not_like_Go.html">&lt;p&gt;** Update 2018-01-09 **
Since @inge4pres pointed out on Twitter that this post is merely a rant without any hard facts, I posted an updated version of this - 
see 2018-01-09 ‘Why I do not like Go, revisited’&lt;/p&gt;

&lt;h1 id=&quot;synopsis&quot;&gt;Synopsis&lt;/h1&gt;
&lt;p&gt;I’ve recently played a little bit with Go (solved one of the Advent of Code puzzles in it - another Blog post with details regarding that will follow soon), and overall, I don’t like it. I don’t like its attitude, and I don’t like the lack of convenience features I expect from newly designed languages nowadays.&lt;/p&gt;

&lt;h1 id=&quot;detailed-rant&quot;&gt;Detailed Rant&lt;/h1&gt;

&lt;h2 id=&quot;naming&quot;&gt;Naming&lt;/h2&gt;
&lt;p&gt;Choosing Go as the name of a new programming language was incredibly stupid (since Go the board game has been around for thousands of years). Searching for “Go tutorial” can therefore never be unambiguous - either you want an explanation of the board game, or you want one for the programming language. But apparently, Google’s arrogance let them assume that they don’t have to respect anybody else.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Taken from https://golang.org/doc/code.html#Testing (official Go documentation):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    got := Reverse(c.in)
    if got != c.want {
      t.Errorf(&quot;Reverse(%q) == %q, want %q&quot;, c.in, got, c.want)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Seriously? You recommend I &lt;em&gt;manually compose my assertion and error message&lt;/em&gt; when I want to write a trivial unit test?&lt;/p&gt;

&lt;p&gt;What was so wrong about&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  AssertEquals(Reverse(c.in), c.want, &quot;Reverse does not work as expected&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is simply brain-dead.&lt;/p&gt;

&lt;h2 id=&quot;attitude-of-the-go-core-team&quot;&gt;Attitude of the Go core team&lt;/h2&gt;
&lt;p&gt;At first, I thought “Ok, Go is still young, and they made some mistakes that they will certainly fix in future releases”. But then, I read this:&lt;/p&gt;

&lt;p&gt;“There are many things in the Go language and libraries that differ from modern practices, simply because we feel it’s sometimes worth trying a different approach. https://golang.org/doc/faq#assertions
“&lt;/p&gt;

&lt;p&gt;Translation: “We do it differently because we are Google and therefore know better than everybody else on the planet. We ignore important research and knowledge obtained by others because we massively suffer from the NIH syndrome.”&lt;/p&gt;

&lt;h2 id=&quot;attitude-of-go-users&quot;&gt;Attitude of Go users&lt;/h2&gt;
&lt;p&gt;The final straw was the attitude that several Go users showed on StackOverflow, e.g.&lt;/p&gt;

&lt;p&gt;“It’s not the Go way” https://stackoverflow.com/a/18638071/610979&lt;/p&gt;

&lt;p&gt;It might not be the Go way, but it’s the &lt;em&gt;sensible, industry proven&lt;/em&gt; way.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Goodbye, Go.&lt;/p&gt;</content><author><name></name></author><category term="code" /><category term="development" /><category term="Go" /><category term="programming" /><summary type="html">** Update 2018-01-09 ** Since @inge4pres pointed out on Twitter that this post is merely a rant without any hard facts, I posted an updated version of this - see 2018-01-09 ‘Why I do not like Go, revisited’</summary></entry><entry><title type="html">Advent of Code 2017: 24 languages in 24 days</title><link href="/development/programming/2018/01/06/advent_of_code_2017.html" rel="alternate" type="text/html" title="Advent of Code 2017: 24 languages in 24 days" /><published>2018-01-06T00:00:00+01:00</published><updated>2018-01-06T00:00:00+01:00</updated><id>/development/programming/2018/01/06/advent_of_code_2017</id><content type="html" xml:base="/development/programming/2018/01/06/advent_of_code_2017.html">&lt;h1 id=&quot;synopsis&quot;&gt;Synopsis&lt;/h1&gt;
&lt;p&gt;After finishing the first half of the 2017 Advent of Code and implementing each solution in a different programming language, I decided to write down my experience with each of them.&lt;/p&gt;

&lt;h1 id=&quot;day-1-python&quot;&gt;Day 1: Python&lt;/h1&gt;
&lt;p&gt;For an easy start, I chose Python. I’ve done some Python programming in the past, but wouldn’t consider myself a knowledgeable Python programmer.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Pretty straightforward - install Pytest, implement tests using the usual syntax, and run ‘em.&lt;/p&gt;

&lt;h2 id=&quot;types--standard-library&quot;&gt;Types + Standard Library&lt;/h2&gt;
&lt;p&gt;Python claims it “comes with batteries included”, and that’s no exaggeration. You got everything you need.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Python is a very nice programming language. The only reason it isn’t my favourite is: I’ve always liked Ruby more :-)&lt;/p&gt;

&lt;h1 id=&quot;day-2-rust&quot;&gt;Day 2: Rust&lt;/h1&gt;
&lt;p&gt;For day 2, I chose Rust. Rust has been on my radar for quite some time, but I never got around to try it. Therefore, this was my first code ever written in Rust.&lt;/p&gt;

&lt;h2 id=&quot;testing-1&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Works as expected.&lt;/p&gt;

&lt;h2 id=&quot;types--standard-library-1&quot;&gt;Types + Standard Library&lt;/h2&gt;
&lt;p&gt;Everything I needed - basic types, generic containers etc.&lt;/p&gt;

&lt;h2 id=&quot;conclusions-1&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Rust is nice. The syntax is a little bit quirky, but overall, I’d recommend checking it out if you haven’t already.&lt;/p&gt;

&lt;h1 id=&quot;day-3-go&quot;&gt;Day 3: Go&lt;/h1&gt;
&lt;p&gt;Go seems to be one the rising stars in the programming language landscape. I had read different opinions about (from “it’s so great!” to “it’s so useless!”), making it an ideal choice for the AoC. I never had written code in Go before.&lt;/p&gt;

&lt;h2 id=&quot;testing-2&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Bitter disappointment - apparently, Go’s default testing package doesn’t even provide ExpectEquals and similar. 
The reasoning seems to be “assertions are bad, therefore we don’t use them”. While I get why you wouldn’t want to have an assert() &lt;em&gt;macro&lt;/em&gt; in your language, an assert() &lt;em&gt;test assertion&lt;/em&gt; surely will hurt no one?
Sure, I can easily roll my own, but that kind of defeats the purpose of a default package, doesn’t it?&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;Calling Go’s approach “Type Inference” is an insult to all other programming languages. Also, no tuples. ‘nuff said. The standard library contains some quirks - e.g. to use the standard math, you have to convert everything to float64 and back. It would have been nice to be able to use Ceil() and get an int type instead of having to cast the float64 I get.&lt;/p&gt;

&lt;h2 id=&quot;formatting&quot;&gt;Formatting&lt;/h2&gt;
&lt;p&gt;One of the few things I like about Go is that it brings its own formatting tool along and that there’s zero room for configuring it. So no discussions about formatting, braces style etc. Although - why did they have to use tabs instead of spaces?&lt;/p&gt;

&lt;h2 id=&quot;conclusions-2&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Go seems useless to me. It would have been a great language if it had been invented in the the ’80s, and it would have been ok in the ’90s. But in the 2010s, its lack of features is appalling (esp. compared to Rust, Crystal etc.)&lt;/p&gt;

&lt;h1 id=&quot;day-4-f&quot;&gt;Day 4: F#&lt;/h1&gt;
&lt;p&gt;The first language from the ML family. I had already written some toy examples in F# before, but this was my first serious attempt at it.&lt;/p&gt;

&lt;h2 id=&quot;testing-3&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;One of the main entry points for F# into mainstream land is being an ideal testing language for existing .NET code, and what can I say - that’s true.&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-1&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;ML language = Hindley-Milner Type System = Awesomeness. Having access to all of .NET also is quite useful.&lt;/p&gt;

&lt;h2 id=&quot;ecosystem&quot;&gt;Ecosystem&lt;/h2&gt;
&lt;p&gt;Sigh. Getting basic F# to work on Mac OS X is easy (using Homebrew and Mono), but I struggled for quite some time trying to get .NET Core to work. If you want to try this, you’ll have to invest quite some time to get it working properly(unless you’re a lot smarter than me). E.g. I wanted to use NUnit with F# on Mac OS X and created an issue, but none of the F# users of NUnit seems to use a Mac.&lt;/p&gt;

&lt;h2 id=&quot;conclusions-3&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;I like F#, but I wouldn’t use it for serious projects on Mac OS X (yet), since the ecosystem seems not yet stable enough.&lt;/p&gt;

&lt;h1 id=&quot;day-5-c&quot;&gt;Day 5: C++&lt;/h1&gt;
&lt;p&gt;After three languages that were pretty new to me, it was time to get back to my roots - my first project in my first full-time job as a professional programmer (&amp;gt; 15 years ago) was building a Protein-Ligand docking tool in C++.&lt;/p&gt;

&lt;h2 id=&quot;testing-4&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Haven’t looked too deep into it, so I cannot really comment on it. I hand-rolled my own testing framework (just two assertion methods).&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-2&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;After having done some work in languages from the ML family, C++’s types seem inferior. Also, I don’t like the syntax anymore, and the standard library is no exception.&lt;/p&gt;

&lt;h2 id=&quot;conclusions-4&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;C++ and myself have drifted apart; for low-level programming, I’d use Rust or similar, for everything else, either a JVM-based language or a fully-fledged functional one (like Elixir, Haskell, …).&lt;/p&gt;

&lt;h1 id=&quot;day-6-julia&quot;&gt;Day 6: Julia&lt;/h1&gt;
&lt;p&gt;Now for something completely different - Julia. First serious programming effort in this one.&lt;/p&gt;

&lt;h2 id=&quot;testing-5&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Veeeeery nice. Most concise way of writing tests that I’ve ever seen in my lifetime:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@test choose_block([0, 7, 0, 7]) == (7,2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;defines a test for the choose_block function, asserting that the result tuple equals what you expect.&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-3&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;Excellent. Changing the return type from a single int to a tuple was very straightforward, the compiler is helpful, and you get the expected goodies (tuples, lists, dictionaries, …)&lt;/p&gt;

&lt;h2 id=&quot;conclusions-5&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Love on first sight.&lt;/p&gt;

&lt;h1 id=&quot;day-7-crystal&quot;&gt;Day 7: Crystal&lt;/h1&gt;
&lt;p&gt;Having quite some experience with Ruby (almost no Rails, however), I had heard good things about Crystal - Rubyesque syntax, type inference, compilation. An ideal choice for the AoC.&lt;/p&gt;

&lt;h2 id=&quot;testing-6&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Crystal comes with its own spec shard, which allows BDD-style tests. Nice.&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-4&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;Almost like Ruby, and therefore everything I need.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Very nice. Ruby with a helpful compiler as a bonus = awesome.&lt;/p&gt;

&lt;h1 id=&quot;day-8-lua&quot;&gt;Day 8: Lua&lt;/h1&gt;
&lt;p&gt;I’ve tried Lua several times in the past - for some fun game programming, and as a scripting language for my PL/SQL IDE of choice (PL/SQL developer). So I had at least some idea of what was expecting me.&lt;/p&gt;

&lt;h2 id=&quot;testing-7&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;LuaUnit works as expected - fine.&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-5&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;Whoah. Tables are mostly like dictionaries in other languages, but the standard library is lacking so much, it really hurts. No string splitting, no POSIX compatible regexes, … I understand that this is necessary to keep the language core and interpreter small, making it an ideal choice for embedded scripting (e.g. in games), but man, this hurts.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Lua is ok. But if I’ve got the choice, I’ll use something different (Python, Ruby, …).&lt;/p&gt;

&lt;h1 id=&quot;day-9-haskell&quot;&gt;Day 9: Haskell&lt;/h1&gt;
&lt;p&gt;My original intention was to keep Haskell till the very end (since it’s one of my favourite languages - I’ve been using it for Project Euler problems etc. for quite some time), but I was struggling with the other languages and wanted something nice for a change.&lt;/p&gt;

&lt;h2 id=&quot;testing-8&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Quickcheck, HUnit, … - what else do you need for TDD happiness?&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-6&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;Excellent. Haskell’s type system IMHO is the best one I’ve used so far (I’ve got no experience with Idris etc., though). Haskells standard library is adequate.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-2&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I like Haskell a lot, although I still haven’t fully grasped Monads. But for the things I use it for, it’s one of the nicest languages I know.&lt;/p&gt;

&lt;h1 id=&quot;day-10-clojure&quot;&gt;Day 10: Clojure&lt;/h1&gt;
&lt;p&gt;Finally, we’ve arrived in the Land of Lisp.&lt;/p&gt;

&lt;h2 id=&quot;ide&quot;&gt;IDE&lt;/h2&gt;
&lt;p&gt;IntelliJ + Cursive was driving me nuts - trying to remove ‘)’ simply didn’t work. Finally I figured out that you can disable structural editing via&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Settings→Editor→General→Smart Keys→Use structural editing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;While I understand how this features might appeal to a lot of people, I prefer my editor / IDE to get out of my way. And honestly - breaking the backspace / delete key is a feature that I’d consider a showstopper for myself. I’d appreciate it if the IDE simply displayed a warning “unmatched parentheses” and let me go ahead.&lt;/p&gt;

&lt;h2 id=&quot;woes&quot;&gt;Woes&lt;/h2&gt;
&lt;p&gt;Clojure is JVM-based, and while this is certainly an advantage when accessing Java libraries etc., it causes several problems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JVM stack traces (ugly as hell and mostly useless - IntelliJ makes them bearable, but e.g. running lein test can literally dump hundreds of lines on you instead of
 simply saying (expected: x, got: y)&lt;/li&gt;
  &lt;li&gt;java.lang.NullPointerException at runtime (Billion Dollar Mistake, anyone?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion-3&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Clojure &lt;em&gt;as a language&lt;/em&gt; is pretty nice. But simple arity / type errors that are caught by the compiler and result in clear &lt;em&gt;understandable&lt;/em&gt; error messages in other languages are much more difficult to grok in Clojure because they just dump a JVM stack trace on you and leave you on your own. There are are existing solutions for this problem (wrapping the JVM stack trace and extracting the meaningful bits) - however, at least in this regard, Clojure seems to be not very beginner-friendly.&lt;/p&gt;

&lt;h1 id=&quot;day-11-perl6&quot;&gt;Day 11: Perl6&lt;/h1&gt;
&lt;p&gt;Back to the roots - my first professional programming gig was implementing a CGI-based webapp in Perl (about 20 years ago :O ).
Perl6 has a lot of differences from Perl5 - I struggled a bit with these, but overall, Perl6 is much nicer than Perl5 was.&lt;/p&gt;

&lt;h2 id=&quot;testing-9&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;The built-in testing library is ok; the syntax is nice and concise. I consider the requirement to explicitly mention the number of tests that I want to run in the
test file pretty strange, though.&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-7&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;Type Inference doesn’t really count for a dynamically typed language like Perl6. The standard library has everything I’ve needed, although I found the subtle differences between Hash, Bag, HashBag etc. quite confusing.&lt;/p&gt;

&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Although extensive, I don’t like the docs for Perl6 very much - no examples, lots of abstract syntax explanations. Too much theory, and not enough practical advice IMHO.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-4&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Perl6 is ok - if I hadn’t been spoiled by Ruby and Python, I would seriously consider adopting it as my scripting language of choice.&lt;/p&gt;

&lt;h1 id=&quot;day-12-ruby&quot;&gt;Day 12: Ruby&lt;/h1&gt;
&lt;p&gt;Time to go back to a well-known language. I’ve been dabbling in Ruby for &amp;gt; 10 years (bought a copy of the original pickaxe way back), and I still like it a lot.&lt;/p&gt;

&lt;h2 id=&quot;testing-10&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;RSpec always has been one of my favourite testing / spec frameworks - although Cucumber is pretty nice, too.&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-8&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;Type Inference doesn’t really count for a dynamically typed language like Ruby. The standard library has everything I’ve ever needed.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-5&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Ruby claims to be “A programmer’s best friend”, and rightly so. It still is the language I feel most comfortable in.&lt;/p&gt;

&lt;h1 id=&quot;day-13-kotlin&quot;&gt;Day 13: Kotlin&lt;/h1&gt;
&lt;p&gt;Kotlin is like Java, only more concise, functional and without most of the quirks.&lt;/p&gt;

&lt;h2 id=&quot;testing-11&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Very good. You can either use the full power of JUnit (or any other JVM testing framework) or use one of the newer Kotlin-based ones.&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-9&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;Kotlin’s type system and its type inference are quite good. The standard library has everything I needed, and you can always
fall back on Java.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-6&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Very nice. My new favourite JVM language.&lt;/p&gt;

&lt;h1 id=&quot;day-14-java&quot;&gt;Day 14: Java&lt;/h1&gt;
&lt;p&gt;I don’t think Java needs an introduction. Personal opinion: it’s ok-ish, but I never understood why people like it so much.&lt;/p&gt;

&lt;h2 id=&quot;testing-12&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Very good. There’s an abundance of testing / mocking / … frameworks to choose from.&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-10&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;Sigh. Java8 introduced a lot of functional concepts, but like so many things about Java (checked exceptions &lt;em&gt;shuddder&lt;/em&gt;), using it in practice is quite cumbersome. Want an example?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;reduce has type Container&lt;T&gt; -&amp;gt; T. Therefore, it doesn't allow you to reduce from Container&lt;T&gt; -&amp;gt; U unless you also provide a so-called combiner. That's an unnecessary restriction.&lt;/T&gt;&lt;/T&gt;&lt;/li&gt;
  &lt;li&gt;TODO: the Java compiler apparently doesn’t handle exception specifications correctly for map with a local function correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion-7&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I really like the JVM (apart from its stacktraces). The Java language is a solid workhorse, but no more than that. There are better alternatives (e.g. Kotlin), but there are also worse ones.&lt;/p&gt;

&lt;h1 id=&quot;day-15-javascript&quot;&gt;Day 15: Javascript&lt;/h1&gt;
&lt;p&gt;And now, for something completely different, I give you - Javascript!&lt;/p&gt;

&lt;h2 id=&quot;testing-13&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Quite good (although I hand-rolled my own minimalist framework, since I didn’t have Internet access at the time I was solving this puzzle).&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-11&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;Type system? Urks. Type inference? Irrelevant for a dynamic language. Standard Library? Ok-ish.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-8&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I don’t like Javascript too much. Whenever possible, I prefer Elm or any other functional language that compiles to Javascript.&lt;/p&gt;

&lt;h1 id=&quot;day-16-ocaml&quot;&gt;Day 16: OCaml&lt;/h1&gt;
&lt;p&gt;Another statically compiled functional language. A couple of years ago, I read (part of) “Real World OCaml” and did some of the exercises, but found
Haskell more interesting.&lt;/p&gt;

&lt;h2 id=&quot;testing-14&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;OUnit is ok - not spectacular, but not bad, either. Haven’t really looked for alternatives.&lt;/p&gt;

&lt;h2 id=&quot;types-type-inference--standard-library-12&quot;&gt;Types, Type Inference &amp;amp; Standard Library&lt;/h2&gt;
&lt;p&gt;The type inference of OCaml is pretty darn good (IME, Haskell is still better, though). The standard library is somewhat lacking, but 
the Core libraries (which seem to be quasi-standard) fill the gaps quite nicely.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-9&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Very nice. While Haskell’s 100% purity really shines, OCaml is more approachable since you can just throw in a print in a let expression
for debugging purposes without having the compiler shout at you ;-)&lt;/p&gt;</content><author><name></name></author><category term="code" /><category term="development" /><category term="programming" /><category term="Python" /><category term="Ruby" /><category term="C++" /><category term="Lua" /><category term="Perl" /><summary type="html">Synopsis After finishing the first half of the 2017 Advent of Code and implementing each solution in a different programming language, I decided to write down my experience with each of them.</summary></entry><entry><title type="html">Actionbound cheatsheet</title><link href="/2017/12/31/actionbound_cheatsheet.html" rel="alternate" type="text/html" title="Actionbound cheatsheet" /><published>2017-12-31T00:00:00+01:00</published><updated>2017-12-31T00:00:00+01:00</updated><id>/2017/12/31/actionbound_cheatsheet</id><content type="html" xml:base="/2017/12/31/actionbound_cheatsheet.html">&lt;h1 id=&quot;qr-codes&quot;&gt;QR Codes&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;generate them on the ActionBound website&lt;/li&gt;
  &lt;li&gt;export them as PNG&lt;/li&gt;
  &lt;li&gt;open in Preview&lt;/li&gt;
  &lt;li&gt;Print, settings: scale to 80% / 4 copies per page&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="actionbound" /><category term="cheatsheet" /><summary type="html">QR Codes generate them on the ActionBound website export them as PNG open in Preview Print, settings: scale to 80% / 4 copies per page</summary></entry><entry><title type="html">Elixir cheatsheet</title><link href="/elixir/cheatsheet/2017/11/19/elixir-cheatsheet.html" rel="alternate" type="text/html" title="Elixir cheatsheet" /><published>2017-11-19T17:46:13+01:00</published><updated>2017-11-19T17:46:13+01:00</updated><id>/elixir/cheatsheet/2017/11/19/elixir-cheatsheet</id><content type="html" xml:base="/elixir/cheatsheet/2017/11/19/elixir-cheatsheet.html">&lt;h1 id=&quot;elixir-cheatsheet&quot;&gt;Elixir cheatsheet&lt;/h1&gt;
&lt;h2 id=&quot;create-a-new-project&quot;&gt;Create a new project&lt;/h2&gt;
&lt;p&gt;mix new &lt;project name=&quot;&quot;&gt;&lt;/project&gt;&lt;/p&gt;
&lt;h2 id=&quot;run-tests&quot;&gt;Run tests&lt;/h2&gt;
&lt;p&gt;mix test&lt;/p&gt;</content><author><name></name></author><summary type="html">Elixir cheatsheet Create a new project mix new Run tests mix test</summary></entry><entry><title type="html">Cheatsheet: Adding a new webapp to Apache</title><link href="/apache/webapp/2017/11/19/adding-a-new-site-to-apache.html" rel="alternate" type="text/html" title="Cheatsheet: Adding a new webapp to Apache" /><published>2017-11-19T17:46:13+01:00</published><updated>2017-11-19T17:46:13+01:00</updated><id>/apache/webapp/2017/11/19/adding-a-new-site-to-apache</id><content type="html" xml:base="/apache/webapp/2017/11/19/adding-a-new-site-to-apache.html">&lt;h1 id=&quot;basic-config-as-root&quot;&gt;Basic config (as root)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;create a new user
useradd &lt;app&gt;\_user&lt;/app&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;copy your app to /var/www
cp myapp /var/www&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;set the owner
chown -r &lt;app&gt;\_user.&lt;app&gt;\_user /var/www/myapp&lt;/app&gt;&lt;/app&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;update Apache config
vim /etc/apache2/sites-available/&lt;app&gt;.conf
cd /etc/apache2/sites-enabled &amp;amp;&amp;amp; ln -s ../sites-available/&lt;app&gt;.conf&lt;/app&gt;&lt;/app&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;update SSL certificates
certbot -apache&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Basic config (as root) create a new user useradd \_user</summary></entry><entry><title type="html">Hühner-Satay-Spiesse</title><link href="/jekyll/update/2017/11/18/satay-spiesse.html" rel="alternate" type="text/html" title="Hühner-Satay-Spiesse" /><published>2017-11-18T17:46:13+01:00</published><updated>2017-11-18T17:46:13+01:00</updated><id>/jekyll/update/2017/11/18/satay-spiesse</id><content type="html" xml:base="/jekyll/update/2017/11/18/satay-spiesse.html">&lt;h1 id=&quot;quelle&quot;&gt;Quelle&lt;/h1&gt;
&lt;p&gt;Das grosse Buch der asiatischen Küche, S.60&lt;/p&gt;
&lt;h1 id=&quot;zubereitung&quot;&gt;Zubereitung&lt;/h1&gt;
&lt;p&gt;Holzspiesse &amp;gt;= 30 min in Wasser einlegen
  500g Hühnerbrustfleisch längs halbieren. In einer metallfreien Schüssel 
  1 EL Honig 
  60 ml Sojasauce 
  2 TL Sesamöl 
  1 TL gemahlene Kurkuma 
  1 TL gemahlenen Koriander und 
  1/2 TL Chilipulver verrühren. Hühnerfleisch ziehharmonikaförmig auf eingeweichte Holzspiesse stecken und die Fleischspiesse in die Marinade legen. 
Zugedeckt mindestens 2 h im Kühlschrank ziehen lassen.&lt;/p&gt;

&lt;p&gt;Für die schnelle Satay-Sauce
  1 kleine Zwiebel fein hacken und in
  1 EL Öl glasig werden lassen
  125 g körnige Erdnussbutter
  2 EL Sojasauce
  125 ml Kokoscreme
  2 EL süße Chilisauce
unterrühren und bei geringer Hitze zu einer sämigen Sauce einkochen lassen.
Die Fleischspiesse im vorgeheizten Ofen
  5-7 min grillen
dabei mehrmals wenden und mit Marinade bestreichen. Die Spiesse mit warmer Satay-Sauce reichen. Ergibt 8 Stück.&lt;/p&gt;</content><author><name></name></author><summary type="html">Quelle Das grosse Buch der asiatischen Küche, S.60 Zubereitung Holzspiesse &amp;gt;= 30 min in Wasser einlegen 500g Hühnerbrustfleisch längs halbieren. In einer metallfreien Schüssel 1 EL Honig 60 ml Sojasauce 2 TL Sesamöl 1 TL gemahlene Kurkuma 1 TL gemahlenen Koriander und 1/2 TL Chilipulver verrühren. Hühnerfleisch ziehharmonikaförmig auf eingeweichte Holzspiesse stecken und die Fleischspiesse in die Marinade legen. Zugedeckt mindestens 2 h im Kühlschrank ziehen lassen.</summary></entry><entry><title type="html">Welcome Jekyll; goodbye, Blogspot!</title><link href="/jekyll/update/2017/11/18/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome Jekyll; goodbye, Blogspot!" /><published>2017-11-18T17:46:13+01:00</published><updated>2017-11-18T17:46:13+01:00</updated><id>/jekyll/update/2017/11/18/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2017/11/18/welcome-to-jekyll.html">&lt;p&gt;While hosting my blog at inreoh.blogspot.de served me quite well for a couple of years,
I recently began to get annoyed by the limitations of this approach, namely:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;having to use an inferior editor (the web-based one) as opposed to vim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting started is quite easy:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; starts a new Jekyll project, and serves it at localhost:4000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To convert an existing Blogger blog:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;YYYY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-import&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;JekyllImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Importers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Blogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;source&quot;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/path/to/blog-MM-DD-YYYY.xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;no-blogger-info&quot;&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# not to leave blogger-URL info (id and old URL) in the front matter&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;replace-internal-link&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# replace internal links using the post_url liquid tag.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubygems&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; imports your blog posts by adding a file in \_static/ for each of them&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">While hosting my blog at inreoh.blogspot.de served me quite well for a couple of years, I recently began to get annoyed by the limitations of this approach, namely: having to use an inferior editor (the web-based one) as opposed to vim</summary></entry><entry><title type="html">No more KeePassX / KeePassXC woes</title><link href="/2017/10/07/no-more-keepassx-keepassxc-woes.html" rel="alternate" type="text/html" title="No more KeePassX / KeePassXC woes" /><published>2017-10-07T18:03:00+02:00</published><updated>2017-10-07T18:03:00+02:00</updated><id>/2017/10/07/no-more-keepassx-keepassxc-woes</id><content type="html" xml:base="/2017/10/07/no-more-keepassx-keepassxc-woes.html">KeePass is an amazing tool for storing passwords in a secure manner, but syncing password databases across multiple devices can be somewhat challenging.&lt;br /&gt;&lt;br /&gt;For several years, I've used&lt;br /&gt;- MiniKeepass on iOS&lt;br /&gt;- KeePass + Mono on OS X&lt;br /&gt;- Dropbox for syncing&lt;br /&gt;&lt;br /&gt;and was quite content with this combination.&lt;br /&gt;&lt;br /&gt;But since KeePass is not very well integrated in OS X, I decided to switch to KeePass X. This seemed ok at first glance, but recently I noticed that several entries I had created in MiniKeepass were missing in KeePassX 😕. I then tried KeePassXC, with the same result.&lt;br /&gt;&lt;br /&gt;I still haven't found the root cause - it might be a manifestation of h&lt;a href=&quot;ttps://github.com/MiniKeePass/MiniKeePass/issues/136&quot;&gt;ttps://github.com/MiniKeePass/MiniKeePass/issues/136&lt;/a&gt; or a similar (more recent) bug in MiniKeepass, but I haven't found time to investigate this.&lt;br /&gt;&lt;br /&gt;For the time being, I switched from KeePassX / KeePassXC to &lt;a href=&quot;https://mstarke.github.io/MacPass/&quot;&gt;MacPass.&lt;/a&gt;&lt;br /&gt;It's also Open Source, and it seems to be able to handle alle entries created by MiniKeepass.</content><author><name>Frank Schmitt</name></author><category term="KeePass" /><category term="MacOSX" /><category term="kdbx" /><summary type="html">KeePass is an amazing tool for storing passwords in a secure manner, but syncing password databases across multiple devices can be somewhat challenging.For several years, I've used- MiniKeepass on iOS- KeePass + Mono on OS X- Dropbox for syncingand was quite content with this combination.But since KeePass is not very well integrated in OS X, I decided to switch to KeePass X. This seemed ok at first glance, but recently I noticed that several entries I had created in MiniKeepass were missing in KeePassX 😕. I then tried KeePassXC, with the same result.I still haven't found the root cause - it might be a manifestation of https://github.com/MiniKeePass/MiniKeePass/issues/136 or a similar (more recent) bug in MiniKeepass, but I haven't found time to investigate this.For the time being, I switched from KeePassX / KeePassXC to MacPass.It's also Open Source, and it seems to be able to handle alle entries created by MiniKeepass.</summary></entry><entry><title type="html">Chromecast setup - not as easy as promised</title><link href="/2016/12/30/chromecast-setup-not-as-easy-as-promised.html" rel="alternate" type="text/html" title="Chromecast setup - not as easy as promised" /><published>2016-12-30T18:23:00+01:00</published><updated>2016-12-30T18:23:00+01:00</updated><id>/2016/12/30/chromecast-setup-not-as-easy-as-promised</id><content type="html" xml:base="/2016/12/30/chromecast-setup-not-as-easy-as-promised.html">Today, I bought a Google Chromecast for a friend of mine. The leaflet promises setup in three easy steps:  &lt;ul&gt; &lt;li&gt; connect to power and TV (via HDMI)   =&amp;gt; ok, no problem&lt;/li&gt; &lt;li&gt; switch the source on your TV to the chromecast   =&amp;gt; ok, the splash screen asks you to open chromecast.com/setup to complete the setup &lt;/li&gt; &lt;li&gt; open chromecast.com/setup    =&amp;gt; doesn't work at all - apparently, the chromecast fails to perform a DNS lookup for itself (sic!) &lt;/li&gt; &lt;/ul&gt; The only reliable way to get it to work seems to be to install the Google Home app and use that to setup the Chromecast - which is okay, but the leaflet and the Chromecast itself explicitly recommend doing it the other way. It's a shame that Google fails to provide correct information regarding such a basic thing.</content><author><name>Frank Schmitt</name></author><summary type="html">Today, I bought a Google Chromecast for a friend of mine. The leaflet promises setup in three easy steps: connect to power and TV (via HDMI) =&amp;gt; ok, no problem switch the source on your TV to the chromecast =&amp;gt; ok, the splash screen asks you to open chromecast.com/setup to complete the setup open chromecast.com/setup =&amp;gt; doesn't work at all - apparently, the chromecast fails to perform a DNS lookup for itself (sic!) The only reliable way to get it to work seems to be to install the Google Home app and use that to setup the Chromecast - which is okay, but the leaflet and the Chromecast itself explicitly recommend doing it the other way. It's a shame that Google fails to provide correct information regarding such a basic thing.</summary></entry></feed>